# Python Learning Workbook

Welcome to your interactive Python workbook! This demonstrates all the features available.

## Chapter 1: Introduction to Python

Python is a high-level, interpreted programming language known for its simplicity and readability.

> Question: What makes Python different from other programming languages?
< Answer: Python emphasizes code readability with its use of significant whitespace and clear syntax, making it ideal for beginners while remaining powerful for experts.

### Getting Started

Let's start with the classic "Hello, World!" program:

```javascript:run
console.log("Hello, World!");
console.log("Welcome to Cursor Workbook!");
```

### Basic Arithmetic

Try this interactive code block:

```javascript:run
const a = 10;
const b = 20;
const sum = a + b;
console.log(`The sum of ${a} and ${b} is ${sum}`);
```

## Chapter 2: Variables and Data Types

> Question: What are the basic data types in JavaScript?
< Answer: JavaScript has several basic types including Number, String, Boolean, Object, Array, null, and undefined.

### Working with Strings

```javascript:run
const name = "Alice";
const greeting = `Hello, ${name}!`;
console.log(greeting);
console.log("String length:", greeting.length);
```

## Chapter 3: Daily Practice Tracker

Track your learning progress:

- [ ] Complete Chapter 1
- [ ] Complete Chapter 2
- [ ] Complete Chapter 3
- [ ] Practice coding exercises
- [ ] Review concepts

## Chapter 4: Control Flow

> Question: What is the difference between for and while loops?
< Answer: A for loop is used when you know how many times you want to iterate, while a while loop continues until a condition becomes false.

### Conditional Statements

```javascript:run
const score = 85;

if (score >= 90) {
  console.log("Grade: A");
} else if (score >= 80) {
  console.log("Grade: B");
} else if (score >= 70) {
  console.log("Grade: C");
} else {
  console.log("Grade: F");
}
```

### Loops Example

```javascript:run
console.log("Counting to 5:");
for (let i = 1; i <= 5; i++) {
  console.log(`Count: ${i}`);
}
```

## Chapter 5: Functions

> Question: Why are functions important in programming?
< Answer: Functions allow you to encapsulate reusable code, make programs more modular, easier to test, and maintain.

### Function Example

```javascript:run
function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

console.log("Fibonacci sequence:");
for (let i = 0; i < 10; i++) {
  console.log(`F(${i}) = ${fibonacci(i)}`);
}
```

## Chapter 6: Advanced Topics

### Array Operations

```javascript:run
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(n => n * 2);
const sum = numbers.reduce((acc, n) => acc + n, 0);

console.log("Original:", numbers);
console.log("Doubled:", doubled);
console.log("Sum:", sum);
```

## Learning Goals

- [ ] Master basic syntax
- [ ] Understand data structures
- [ ] Learn object-oriented programming
- [ ] Practice problem-solving
- [ ] Build real projects

## Review Questions

> Question: What is scope in JavaScript?
< Answer: Scope determines the accessibility of variables. JavaScript has function scope, block scope (with let/const), and global scope.

> Question: What are arrow functions?
< Answer: Arrow functions are a concise way to write function expressions in JavaScript, introduced in ES6. They have a shorter syntax and lexically bind the 'this' value.

---

**Congratulations!** You've completed this workbook. Keep practicing and building projects!
